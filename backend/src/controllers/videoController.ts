import { Request, Response } from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import Video from "../models/Video";
import { AuthenticatedRequest } from "../middleware/authenticate";
import Invite from "../models/Invite";

// Configure Multer for local storage (Multer configuration is generated by AI)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, "../../uploads/videos");
    fs.mkdirSync(uploadPath, { recursive: true });
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const filetypes = /mp4|mov|avi/;
    const extname = filetypes.test(
      path.extname(file.originalname).toLowerCase()
    );
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
      return cb(null, true);
    }
    cb(new Error("Only video files (mp4, mov, avi) are allowed"));
  },
  limits: { fileSize: 1024 * 1024 * 1024 }, // 1GB limit
});

export const uploadVideo = upload.single("video");

export const createVideo = async (req: AuthenticatedRequest, res: Response) => {
  const { title, description } = req.body;
  const file = req.file;
  const uploadedBy = req.user?.id;

  if (!uploadedBy)
    return res
      .status(401)
      .json({ code: 401, message: "Unauthorized: No user authenticated" });

  if (!file)
    return res
      .status(400)
      .json({ code: 400, message: "No video file uploaded" });

  try {
    const video = new Video({
      title,
      description,
      filePath: file.path,
      uploadedBy,
    });

    await video.save();

    res.status(201).json({
      id: video._id,
      title,
      description,
      filePath: video.filePath,
      uploadedBy,
    });
  } catch (e) {
    res.status(500).json({ code: 500, message: "Server error" });
  }
};

export const updateVideo = async (req: AuthenticatedRequest, res: Response) => {
  const { videoId } = req.params;
  const { title, description } = req.body;
  const userId = req.user?.id;

  if (!userId)
    return res
      .status(401)
      .json({ code: 401, message: "Unauthorized: No user authenticated" });

  try {
    const updateVideo = await Video.findById(videoId);
    if (!updateVideo)
      return res.status(404).json({ code: 404, message: "Video not found" });

    if (updateVideo.uploadedBy.toString() !== userId)
      return res
        .status(403)
        .json({ code: 403, message: "Not authorized to update" });

    if (title) updateVideo.title = title;
    if (description) updateVideo.description = description;

    await updateVideo.save();

    res.status(200).json({
      id: updateVideo._id,
      title: updateVideo.title,
      description: updateVideo.description,
      filePath: updateVideo.filePath,
      uploadedBy: updateVideo.uploadedBy,
    });
  } catch (e) {
    res.status(500).json({ code: 500, message: "Server Error" });
  }
};

export const deleteVideo = async (req: AuthenticatedRequest, res: Response) => {
  const { videoId } = req.params;
  const userId = req.user?.id;

  if (userId)
    return res
      .status(401)
      .json({ code: 401, message: "Unauthorized: No user authenticated" });

  try {
    const video = await Video.findById(videoId);
    if (!video)
      return res.status(404).json({ code: 404, message: "Video not found" });

    //video.uploadedBy is objectID ref to user
    if (video.uploadedBy.toString() !== userId)
      return res
        .status(403)
        .json({ code: 403, message: "Not authorized to delete the video" });

    //delet einvite with the video
    await Invite.deleteMany({ videoId: videoId });

    fs.unlinkSync(video.filePath);

    await video.deleteOne();
    res.status(204).send();
  } catch (e) {
    res.status(500).json({ code: 500, message: "Server Error" });
  }
};

//get self uploaded vids
export const getOwnVideo = async (req: AuthenticatedRequest, res: Response) => {
  const userId = req.user?.id;

  if (userId)
    return res
      .status(401)
      .json({ code: 401, message: "Unauthorized: No user authenticated" });
  try {
    const videos = await Video.find({ uploadedBy: userId }).populate(
      "uploadedBy",
      "username"
    );

    res.status(200).json(videos);
  } catch (e) {
    res.status(500).json({ code: 500, message: "Server Error" });
  }
};

//get all invited vids
export const getInvitationVideo = async (
  req: AuthenticatedRequest,
  res: Response
) => {
  const userId = req.user?.id;

  if (!userId) {
    return res
      .status(401)
      .json({ code: 401, message: "Unauthorized: No user authenticated" });
  }

  try {
    const invites = await Invite.find({
      invitedUser: userId,
      status: "accepted",
    }).select("videoId");

    //invite transform obj from above to array of id (suggested by ai)
    const invitedVideosIds = invites.map((invite) => invite.videoId);

    const videos = await Video.find({
      _id: { $in: invitedVideosIds },
    }).populate("uploadedBy", "username");

    res.status(200).json(videos);
  } catch (e) {
    res.status(500).json({ code: 500, message: "Server Error" });
  }
};
